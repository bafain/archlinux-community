diff --git a/Command/Info.hs b/Command/Info.hs
index c9a314056a..3ae82f5532 100644
--- a/Command/Info.hs
+++ b/Command/Info.hs
@@ -56,15 +56,17 @@ data KeyData = KeyData
 	, backendsKeys :: M.Map KeyVariety Integer
 	}
 
-instance Monoid KeyData where
-	mempty = KeyData 0 0 0 M.empty
-	mappend a b = KeyData
+instance Semigroup KeyData where
+	a <> b = KeyData
 		{ countKeys = countKeys a + countKeys b
 		, sizeKeys = sizeKeys a + sizeKeys b
 		, unknownSizeKeys = unknownSizeKeys a + unknownSizeKeys b
 		, backendsKeys = backendsKeys a <> backendsKeys b
 		}
 
+instance Monoid KeyData where
+	mempty = KeyData 0 0 0 M.empty
+
 data NumCopiesStats = NumCopiesStats
 	{ numCopiesVarianceMap :: M.Map Variance Integer
 	}
diff --git a/Git/Fsck.hs b/Git/Fsck.hs
index a716b56e3a..e7061cb812 100644
--- a/Git/Fsck.hs
+++ b/Git/Fsck.hs
@@ -44,15 +44,17 @@ type MissingObjects = S.Set Sha
 
 type Truncated = Bool
 
+instance Semigroup FsckOutput where
+	(<>) (FsckOutput s1 t1) (FsckOutput s2 t2) = FsckOutput (S.union s1 s2) (t1 || t2)
+	(<>) (FsckOutput s t) _ = FsckOutput s t
+	(<>) _ (FsckOutput s t) = FsckOutput s t
+	(<>) NoFsckOutput NoFsckOutput = NoFsckOutput
+	(<>) AllDuplicateEntriesWarning AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
+	(<>) AllDuplicateEntriesWarning NoFsckOutput = AllDuplicateEntriesWarning
+	(<>) NoFsckOutput AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
+
 instance Monoid FsckOutput where
 	mempty = NoFsckOutput
-	mappend (FsckOutput s1 t1) (FsckOutput s2 t2) = FsckOutput (S.union s1 s2) (t1 || t2)
-	mappend (FsckOutput s t) _ = FsckOutput s t
-	mappend _ (FsckOutput s t) = FsckOutput s t
-	mappend NoFsckOutput NoFsckOutput = NoFsckOutput
-	mappend AllDuplicateEntriesWarning AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
-	mappend AllDuplicateEntriesWarning NoFsckOutput = AllDuplicateEntriesWarning
-	mappend NoFsckOutput AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
 
 {- Runs fsck to find some of the broken objects in the repository.
  - May not find all broken objects, if fsck fails on bad data in some of
diff --git a/Types/DesktopNotify.hs b/Types/DesktopNotify.hs
index e6df05ab1c..83aeef7c54 100644
--- a/Types/DesktopNotify.hs
+++ b/Types/DesktopNotify.hs
@@ -16,10 +16,12 @@ data DesktopNotify = DesktopNotify
 	}
 	deriving (Show)
 
+instance Semigroup DesktopNotify where
+    (<>) (DesktopNotify s1 f1) (DesktopNotify s2 f2) =
+        DesktopNotify (s1 || s2) (f1 || f2)
+
 instance Monoid DesktopNotify where
 	mempty = DesktopNotify False False
-	mappend (DesktopNotify s1 f1) (DesktopNotify s2 f2) =
-		DesktopNotify (s1 || s2) (f1 || f2)
 
 mkNotifyStart :: DesktopNotify
 mkNotifyStart = DesktopNotify True False
diff --git a/Types/Difference.hs b/Types/Difference.hs
index 4abc75c447..56b3bcab63 100644
--- a/Types/Difference.hs
+++ b/Types/Difference.hs
@@ -67,14 +67,16 @@ instance Eq Differences where
 		, oneLevelBranchHash
 		]
 
-instance Monoid Differences where
-	mempty = Differences False False False
-	mappend a@(Differences {}) b@(Differences {}) = a
+instance Semigroup Differences where
+	(<>) a@(Differences {}) b@(Differences {}) = a
 		{ objectHashLower = objectHashLower a || objectHashLower b
 		, oneLevelObjectHash = oneLevelObjectHash a || oneLevelObjectHash b
 		, oneLevelBranchHash = oneLevelBranchHash a || oneLevelBranchHash b
 		}
-	mappend _ _ = UnknownDifferences
+	(<>) _ _ = UnknownDifferences
+
+instance Monoid Differences where
+	mempty = Differences False False False
 
 readDifferences :: String -> Differences
 readDifferences = maybe UnknownDifferences mkDifferences . readish
diff --git a/Types/Test.hs b/Types/Test.hs
index 50c460f501..5eeb7e52b4 100644
--- a/Types/Test.hs
+++ b/Types/Test.hs
@@ -19,13 +19,15 @@ data TestOptions = TestOptions
 	, internalData :: CmdParams
 	}
 
-instance Monoid TestOptions where
-	mempty = TestOptions mempty False False mempty
-	mappend a b = TestOptions
+instance Semigroup TestOptions where
+	(<>) a b = TestOptions
 		(tastyOptionSet a <> tastyOptionSet b)
 		(keepFailuresOption a || keepFailuresOption b)
 		(fakeSsh a || fakeSsh b)
 		(internalData a <> internalData b)
 
+instance Monoid TestOptions where
+	mempty = TestOptions mempty False False mempty
+
 
 type TestRunner = TestOptions -> IO ()
